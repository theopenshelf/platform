openapi: 3.0.1
info:
  title: The OpenShelf API
  version: "2.0"
  description: |
    # Summary
    The OpenShelf  API

servers:
  - url: https://TheOpenShelf.dev
    description: The OpenShelf API

paths:
  /public/auth/login:
    post:
      operationId: login
      summary: Log user with username / password
      tags:
        - auth-api

      security:
        - BearerAuthOAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "my-login"
                password:
                  type: string
                  example: "my-password"
              required:
                - username
                - password

      responses:
        "200":
          $ref: "#/components/responses/OK_200_LOGIN"

  /public/auth/signup:
    post:
      operationId: signUp
      summary: Register a new user
      tags:
        - auth-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
                username:
                  type: string
                  example: "newuser"
                password:
                  type: string
                  example: "securepassword"
                streetAddress:
                  type: string
                  example: "123 Main St"
                city:
                  type: string
                  example: "Anytown"
                postalCode:
                  type: string
                  example: "12345"
                country:
                  type: string
                  example: "Countryland"
              required:
                - email
                - username
                - password
      responses:
        "201":
          description: User registered successfully
        "400":
          $ref: "#/components/responses/BadRequest"

  /public/auth/signout:
    post:
      operationId: signOut
      summary: Sign out the current user
      tags:
        - auth-api
      responses:
        "204":
          description: User signed out successfully

  /public/auth/reset-password:
    post:
      operationId: resetPassword
      summary: Reset password for a user
      tags:
        - auth-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
              required:
                - email
      responses:
        "200":
          description: Password reset email sent
        "404":
          $ref: "#/components/responses/NotFound"

  /public/auth/reset-password/confirm:
    post:
      operationId: confirmResetPassword
      summary: Confirm password reset with token
      tags:
        - auth-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "reset-token-123"
                newPassword:
                  type: string
                  example: "newSecurePassword"
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /public/auth/email-verification:
    post:
      operationId: verifyEmail
      summary: Verify user's email with token
      tags:
        - auth-api
      parameters:
        - name: token
          in: query
          description: Email verification token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Email verification response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email verified successfully"
        "400":
          $ref: "#/components/responses/BadRequest"

  /hub/hello-world:
    get:
      operationId: getHelloWorld
      summary: hello world
      tags:
        - hello-world-api

      security:
        - BearerAuthOAuth: []

      responses:
        "200":
          $ref: "#/components/responses/OK_200_GET_HELLO_WORLD"

  /hub/items:
    get:
      operationId: getItems
      summary: Retrieve all items (filter by current user items)
      tags:
        - items-hub-api
      parameters:
        - name: borrowedByCurrentUser
          in: query
          description: Filter items borrowed by current user
          required: false
          schema:
            type: boolean
        - name: borrowedBy
          in: query
          description: Filter items by borrowed by
          required: false
          schema:
            type: string
        - name: libraryIds
          in: query
          description: Filter items by library IDs
          required: false
          schema:
            type: array
            items:
              type: string
        - name: communityIds
          in: query
          description: Filter items by community IDs
          required: false
          schema:
            type: array
            items:
              type: string
        - name: categories
          in: query
          description: Filter items by categories
          required: false
          schema:
            type: array
            items:
              type: string
        - name: searchText
          in: query
          description: Filter items by search text in name or description
          required: false
          schema:
            type: string
        - name: currentlyAvailable
          in: query
          description: Filter items by availability
          required: false
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: Sort items by a specific field
          required: false
          schema:
            type: string
            enum: [createdAt, borrowCount, favorite]
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: startDate
          in: query
          description: Filter items by start date
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Filter items by end date
          required: false
          schema:
            type: string
            format: date
        - name: favorite
          in: query
          description: Filter items by favorite status
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: A paginated list of items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedItemsResponse"
    post:
      operationId: addItem
      summary: Add a new item
      tags:
        - items-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "201":
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}:
    parameters:
      - $ref: "#/components/parameters/itemId"
    get:
      operationId: getItem
      summary: Retrieve a specific item by ID
      tags:
        - items-hub-api
      responses:
        "200":
          description: A single item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}/borrow-records:
    parameters:
      - $ref: "#/components/parameters/itemId"
      - name: owner
        in: query
        description: Filter by owner
        required: false
        schema:
          type: string
      - name: borrower
        in: query
        description: Filter by borrower
        required: false
        schema:
          type: string
    get:
      operationId: getItemBorrowRecords
      summary: Retrieve borrow records for a specific item
      tags:
        - items-hub-api
      responses:
        "200":
          description: Borrow records for the item
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BorrowRecord"
    delete:
      operationId: deleteBorrowRecord
      summary: Delete a borrow record for a specific item
      tags:
        - items-hub-api
      parameters:
        - name: recordId
          in: query
          description: ID of the borrow record to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Borrow record deleted successfully

  /hub/items/{item-id}/actions/borrow:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: borrowItem
      summary: Borrow an item
      tags:
        - items-hub-api
      requestBody:
        description: Borrow item details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                borrowBy:
                  type: string
                  format: uuid
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        "201":
          description: Item borrowed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}/actions/favorite:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: markAsFavorite
      summary: Toggle favorite status of an item
      tags:
        - items-hub-api
      responses:
        "200":
          description: Item favorite status toggled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}/actions/return-item:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: returnItem
      summary: Return a borrowed item
      tags:
        - items-hub-api
      requestBody:
        description: Return item details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                borrowRecordId:
                  type: string
                  format: uuid
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              required:
                - borrowRecordId
      responses:
        "200":
          description: Item returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}/actions/pickup-item:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: pickupItem
      summary: Pickup a borrowed item
      tags:
        - items-hub-api
      requestBody:
        description: Pickup item details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                borrowRecordId:
                  type: string
                  format: uuid
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              required:
                - borrowRecordId
      responses:
        "200":
          description: Item picked up successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}/actions/approval-reservation:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: approvalReservation
      summary: Approve or reject a reservation
      tags:
        - items-hub-api
      requestBody:
        description: Approval details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                decision:
                  type: string
                  enum: [approve, reject]
                borrowRecordId:
                  type: string
                  format: uuid
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              required:
                - decision
                - borrowRecordId
      responses:
        "200":
          description: Reservation approval status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}/actions/approval-pickup:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: approvalPickup
      summary: Approve or reject a pickup
      tags:
        - items-hub-api
      requestBody:
        description: Approval details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                decision:
                  type: string
                  enum: [approve, reject]
                borrowRecordId:
                  type: string
                  format: uuid
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              required:
                - decision
                - borrowRecordId
      responses:
        "200":
          description: Pickup approval status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/items/{item-id}/actions/approval-return:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: approvalReturn
      summary: Approve or reject a return
      tags:
        - items-hub-api
      requestBody:
        description: Approval details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                decision:
                  type: string
                  enum: [approve, reject]
                borrowRecordId:
                  type: string
                  format: uuid
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              required:
                - decision
                - borrowRecordId
      responses:
        "200":
          description: Return approval status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /hub/borrow-records-count-by-status:
    get:
      operationId: getBorrowRecordsCountByStatus
      summary: Retrieve all borrow records count by status
      tags:
        - borrow-records-hub-api
      parameters:
        - name: borrowedByCurrentUser
          in: query
          description: Filter items borrowed by current user
          required: false
          schema:
            type: boolean
        - name: borrowedBy
          in: query
          description: Filter items by borrowed by
          required: false
          schema:
            type: string
        - name: itemId
          in: query
          description: Filter items by item ID
          required: false
          schema:
            type: string
        - name: libraryIds
          in: query
          description: Filter items by library IDs
          required: false
          schema:
            type: array
            items:
              type: string
        - name: status
          in: query
          description: Filter items by status
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BorrowStatus" # Instead of repeating enum values
      responses:
        "200":
          description: A paginated list of borrow records
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BorrowRecordsCountByStatus"

  /hub/borrow-records:
    get:
      operationId: getBorrowRecords
      summary: Retrieve all borrow records (filter by current user borrow records)
      tags:
        - borrow-records-hub-api
      parameters:
        - name: borrowedByCurrentUser
          in: query
          description: Filter items borrowed by current user
          required: false
          schema:
            type: boolean
        - name: borrowedBy
          in: query
          description: Filter items by borrowed by
          required: false
          schema:
            type: string
        - name: itemId
          in: query
          description: Filter items by item ID
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort items by a specific field
          required: false
          schema:
            type: string
            enum:
              [
                pickupDate,
                reservationDate,
                startDate,
                endDate,
                returnDate,
                effectiveReturnDate,
              ]
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
        - name: libraryIds
          in: query
          description: Filter items by library IDs
          required: false
          schema:
            type: array
            items:
              type: string
        - name: categories
          in: query
          description: Filter items by categories
          required: false
          schema:
            type: array
            items:
              type: string
        - name: searchText
          in: query
          description: Filter items by search text in name or description
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter items by status
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BorrowStatus" # Instead of repeating enum values
        - name: favorite
          in: query
          description: Filter items by favorite status
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: A paginated list of borrow records
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedBorrowRecordsResponse"

  /hub/notifications:
    get:
      operationId: getNotifications
      summary: Retrieve all notifications
      tags:
        - notifications-hub-api
      responses:
        "200":
          description: A list of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"

  /hub/notifications/unread-count:
    get:
      operationId: getUnreadNotificationsCount
      summary: Retrieve the count of unread notifications
      tags:
        - notifications-hub-api
      responses:
        "200":
          description: Count of unread notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 5

  /hub/notifications/acknowledge:
    post:
      operationId: acknowledgeNotifications
      summary: Acknowledge notifications as read
      tags:
        - notifications-hub-api
      requestBody:
        description: List of notifications to acknowledge
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Notification"
      responses:
        "204":
          description: Notifications acknowledged successfully

  /hub/categories:
    get:
      operationId: getCategories
      summary: Retrieve all categories
      tags:
        - categories-hub-api
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

  /hub/profile:
    get:
      operationId: getProfile
      summary: Get the current user's profile
      tags:
        - profile-hub-api
      responses:
        "200":
          description: get profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      operationId: updateProfile
      summary: Update the current user's profile
      tags:
        - profile-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "404":
          description: User not found

  /admin/items/{item-id}:
    parameters:
      - $ref: "#/components/parameters/itemId"
    get:
      operationId: getAdminItemById
      summary: Retrieve a specific item by ID
      tags:
        - items-admin-api
      responses:
        "200":
          description: A single item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemStat"

  /admin/items/categories:
    get:
      operationId: getAdminItemCategories
      summary: Retrieve all categories
      tags:
        - categories-admin-api
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

  /admin/items:
    get:
      operationId: getAdminItems
      summary: Retrieve all items
      tags:
        - items-admin-api
      parameters:
        - name: borrowedByCurrentUser
          in: query
          description: Filter items borrowed by current user
          required: false
          schema:
            type: boolean
        - name: libraryIds
          in: query
          description: Filter items by library IDs
          required: false
          schema:
            type: array
            items:
              type: string
        - name: categories
          in: query
          description: Filter items by categories
          required: false
          schema:
            type: array
            items:
              type: string
        - name: searchText
          in: query
          description: Filter items by search text in name or description
          required: false
          schema:
            type: string
        - name: currentlyAvailable
          in: query
          description: Filter items by availability
          required: false
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: Sort items by a specific field
          required: false
          schema:
            type: string
            enum: [createdAt, borrowCount, favorite]
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter items by status
          required: false
          schema:
            type: string
            enum: [available, borrowed, reserved]

      responses:
        "200":
          description: A paginated list of items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedItemsStatsResponse"

    post:
      operationId: addAdminItem
      summary: Add a new item
      tags:
        - items-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemStat"
      responses:
        "201":
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemStat"

  /admin/users:
    get:
      operationId: getUsers
      summary: Retrieve all users
      tags:
        - users-admin-api
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithStats"
    post:
      operationId: saveUser
      summary: Save a user
      tags:
        - users-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWithStats"
      responses:
        "201":
          description: User saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithStats"

  /admin/users/{user-id}:
    parameters:
      - name: user-id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getUser
      summary: Retrieve a specific user by ID
      tags:
        - users-admin-api
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithStats"

  /admin/users/{user-id}/password:
    parameters:
      - name: user-id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: setUserPassword
      summary: Set a user's password
      tags:
        - users-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: "newSecurePassword"
              required:
                - newPassword
      responses:
        "204":
          description: Password updated successfully

  /admin/categories:
    get:
      operationId: getAdminCategories
      summary: Retrieve all categories for admin
      tags:
        - categories-admin-api
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      operationId: addAdminCategory
      summary: Add a new category for admin
      tags:
        - categories-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"

  /admin/categories/{category-id}:
    parameters:
      - name: category-id
        in: path
        description: Category ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getAdminCategory
      summary: Retrieve a specific category by ID for admin
      tags:
        - categories-admin-api
      responses:
        "200":
          description: A single category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"

  /admin/settings/security:
    get:
      operationId: getSecuritySettings
      summary: Retrieve security settings
      tags:
        - settings-admin-api
      responses:
        "200":
          description: Security settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRegistrationEnabled:
                    type: boolean
                    example: true

    post:
      operationId: saveSecuritySettings
      summary: Save security settings
      tags:
        - settings-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isRegistrationEnabled:
                  type: boolean
                  example: false
      responses:
        "200":
          description: Security settings saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRegistrationEnabled:
                    type: boolean
                    example: false

  /public/settings:
    get:
      operationId: getPublicSettings
      summary: Retrieve public UI settings
      tags:
        - settings-public-api
      responses:
        "200":
          description: Public UI settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRegistrationEnabled:
                    type: boolean
                    example: true

  /admin/dashboards/data:
    get:
      operationId: getDashboardData
      summary: Retrieve dashboard data over time
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardBorrowesOverTimeData"

  /admin/dashboards/metrics:
    get:
      operationId: getDashboardMetrics
      summary: Retrieve dashboard metrics
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: Dashboard metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardBorrowesMetrics"

  /admin/dashboards/top-borrowers:
    get:
      operationId: getTopBorrowers
      summary: Retrieve top borrowers
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: Top borrowers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BorrowerMetrics"

  /admin/dashboards/top-items:
    get:
      operationId: getTopItems
      summary: Retrieve top items
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: Top items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemMetrics"

  /admin/dashboards/top-categories:
    get:
      operationId: getTopCategories
      summary: Retrieve top categories
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: Top categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryMetrics"

  /admin/dashboards/user-count:
    get:
      operationId: getUserCount
      summary: Retrieve user count
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: User count retrieved successfully
          content:
            application/json:
              schema:
                type: integer
                example: 100

  /admin/dashboards/item-count:
    get:
      operationId: getItemCount
      summary: Retrieve item count
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: Item count retrieved successfully
          content:
            application/json:
              schema:
                type: integer
                example: 200

  /admin/dashboards/library-count:
    get:
      operationId: getLibraryCount
      summary: Retrieve library count
      tags:
        - dashboards-admin-api
      responses:
        "200":
          description: Library count retrieved successfully
          content:
            application/json:
              schema:
                type: integer
                example: 10

  /admin/help/categories:
    get:
      operationId: getAdminHelpCategories
      summary: Retrieve all help categories
      tags:
        - help-admin-api
      responses:
        "200":
          description: A list of help categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpCategory"
    post:
      operationId: createHelpCategory
      summary: Create a new help category
      tags:
        - help-admin-api
      requestBody:
        description: The category to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpCategory"
      responses:
        "201":
          description: Help category created successfully
    delete:
      operationId: deleteHelpCategory
      summary: Delete a help category
      tags:
        - help-admin-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Help category deleted successfully
    put:
      operationId: updateHelpCategory
      summary: Update a help category
      tags:
        - help-admin-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated category data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpCategory"
      responses:
        "200":
          description: Help category updated successfully

  /admin/help/articles:
    get:
      operationId: getAdminHelpArticles
      summary: Retrieve help articles by category ID
      tags:
        - help-admin-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to filter articles
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of help articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpArticle"
    post:
      operationId: createHelpArticle
      summary: Create a new help article
      tags:
        - help-admin-api
      requestBody:
        description: The article to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpArticle"
      responses:
        "201":
          description: Help article created successfully
    delete:
      operationId: deleteHelpArticle
      summary: Delete a help article
      tags:
        - help-admin-api
      parameters:
        - name: articleId
          in: query
          description: The ID of the article to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Help article deleted successfully
    put:
      operationId: updateHelpArticle
      summary: Update a help article
      tags:
        - help-admin-api
      parameters:
        - name: articleId
          in: query
          description: The ID of the article to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated article data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpArticle"
      responses:
        "200":
          description: Help article updated successfully

  /hub/help/categories:
    get:
      operationId: getHelpCategories
      summary: Retrieve all help categories
      tags:
        - help-api
      responses:
        "200":
          description: A list of help categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpCategory"

  /hub/help/articles:
    get:
      operationId: getHelpArticles
      summary: Retrieve help articles by category ID
      tags:
        - help-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to filter articles
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of help articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpArticle"

  /hub/custom-pages/:
    get:
      operationId: getCustomPageRefs
      summary: Retrieve all custom page references
      tags:
        - custom-pages-hub-api
      responses:
        "200":
          description: A list of custom page references with position and title
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ref:
                      type: string
                    position:
                      type: string
                      enum:
                        [
                          "footer-links",
                          "copyright",
                          "footer-help",
                          "community",
                        ]
                    title:
                      type: string

  /hub/custom-pages/{page-ref}:
    parameters:
      - name: page-ref
        in: path
        description: Reference of the custom page
        required: true
        schema:
          type: string
    get:
      operationId: getCustomPage
      summary: Retrieve a custom page by reference
      tags:
        - custom-pages-hub-api
      responses:
        "200":
          description: A single custom page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

  /admin/custom-pages:
    get:
      operationId: getAdminCustomPages
      summary: Retrieve all custom pages
      tags:
        - custom-pages-admin-api
      responses:
        "200":
          description: A list of custom pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomPage"

    post:
      operationId: createCustomPage
      summary: Create a new custom page
      tags:
        - custom-pages-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPage"
      responses:
        "201":
          description: Custom page created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"

  /admin/custom-pages/{page-ref}:
    parameters:
      - name: page-ref
        in: path
        description: Reference of the custom page
        required: true
        schema:
          type: string
    get:
      operationId: getAdminCustomPage
      summary: Retrieve a specific custom page by reference
      tags:
        - custom-pages-admin-api
      responses:
        "200":
          description: A single custom page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

    put:
      operationId: updateCustomPage
      summary: Update a custom page
      tags:
        - custom-pages-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPage"
      responses:
        "200":
          description: Custom page updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

    delete:
      operationId: deleteCustomPage
      summary: Delete a custom page
      tags:
        - custom-pages-admin-api
      responses:
        "204":
          description: Custom page deleted successfully
        "404":
          description: Custom page not found

  /hub/users:
    get:
      operationId: getHubUsers
      summary: Retrieve all users
      tags:
        - users-hub-api
      parameters:
        - name: query
          in: query
          description: The query to search for
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of users to return
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /hub/users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getHubUserById
      summary: Retrieve a specific user by ID
      tags:
        - users-hub-api
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

  /hub/libraries:
    get:
      operationId: getHubLibraries
      summary: Retrieve all hub libraries
      tags:
        - libraries-hub-api
      parameters:
        - name: communityIds
          in: query
          description: Filter libraries by community IDs
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          description: A list of hub libraries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Library"
    post:
      operationId: addHubLibrary
      summary: Add a new hub library
      tags:
        - libraries-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Library"
      responses:
        "201":
          description: Library created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"

  /hub/libraries/{library-id}:
    parameters:
      - $ref: "#/components/parameters/libraryId"
    get:
      operationId: getHubLibrary
      summary: Retrieve a specific hub library by ID
      tags:
        - libraries-hub-api
      responses:
        "200":
          description: A single hub library
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
    put:
      operationId: updateHubLibrary
      summary: Update an existing hub library
      tags:
        - libraries-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Library"
      responses:
        "200":
          description: Library updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
    delete:
      operationId: deleteHubLibrary
      summary: Delete a hub library
      tags:
        - libraries-hub-api
      responses:
        "204":
          description: Library deleted successfully

  /hub/libraries/{library-id}/members:
    parameters:
      - $ref: "#/components/parameters/libraryId"
    get:
      operationId: getLibraryMembers
      summary: Retrieve members of a specific hub library by ID
      tags:
        - libraries-hub-api
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A paginated list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLibraryMembersResponse"
    post:
      operationId: addMember
      summary: Add a member to a specific hub library by ID
      tags:
        - libraries-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibraryMember"
      responses:
        "201":
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LibraryMember"

  /hub/libraries/{library-id}/members/{user-id}:
    parameters:
      - $ref: "#/components/parameters/libraryId"
      - $ref: "#/components/parameters/userId"
    delete:
      operationId: deleteMember
      summary: Delete a member from a specific hub library by ID
      tags:
        - libraries-hub-api
      responses:
        "204":
          description: Member deleted successfully
    put:
      operationId: updateMember
      summary: Update a member in a specific hub library by ID
      tags:
        - libraries-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibraryMember"
      responses:
        "200":
          description: Member updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LibraryMember"

  /admin/libraries:
    get:
      operationId: getAdminLibraries
      summary: Retrieve all admin libraries
      tags:
        - libraries-admin-api
      responses:
        "200":
          description: A list of admin libraries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Library"
    post:
      operationId: addAdminLibrary
      summary: Add a new admin library
      tags:
        - libraries-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Library"
      responses:
        "201":
          description: Library created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"

  /admin/libraries/{library-id}:
    parameters:
      - $ref: "#/components/parameters/libraryId"
    get:
      operationId: getAdminLibrary
      summary: Retrieve a specific admin library by ID
      tags:
        - libraries-admin-api
      responses:
        "200":
          description: A single admin library
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
    put:
      operationId: updateAdminLibrary
      summary: Update an existing admin library
      tags:
        - libraries-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Library"
      responses:
        "200":
          description: Library updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
    delete:
      operationId: deleteAdminLibrary
      summary: Delete an admin library
      tags:
        - libraries-admin-api
      responses:
        "204":
          description: Library deleted successfully

  /hub/communities:
    get:
      operationId: getCommunities
      summary: Retrieve all communities
      tags:
        - communities-hub-api

      parameters:
        - name: searchText
          in: query
          description: Filter communities by search text in name or description
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: Filter communities by location
          required: false
          schema:
            $ref: "#/components/schemas/Location"
        - name: distance
          in: query
          description: Filter communities by distance
          required: false
          schema:
            type: number
        - name: requiresApproval
          in: query
          description: Filter communities by requires approval
          required: false
          schema:
            type: boolean
        - name: isMember
          in: query
          description: Filter communities where the current user is a member
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A paginated list of communities
          content:
            application/json:
              schema:
                type: object
                required:
                  - totalPages
                  - totalItems
                  - currentPage
                  - itemsPerPage
                  - communities
                properties:
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 100
                  currentPage:
                    type: integer
                    example: 1
                  itemsPerPage:
                    type: integer
                    example: 10
                  communities:
                    type: array
                    items:
                      $ref: "#/components/schemas/CommunityWithMembership"
    post:
      operationId: createCommunity
      summary: Create a new community
      tags:
        - communities-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Community"
      responses:
        "201":
          description: Community created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Community"

  /hub/communities/{community-id}:
    parameters:
      - name: community-id
        in: path
        description: Community ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getCommunity
      summary: Retrieve a specific community by ID
      tags:
        - communities-hub-api
      responses:
        "200":
          description: A single community
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Community"
    put:
      operationId: updateCommunity
      summary: Update an existing community
      tags:
        - communities-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Community"
      responses:
        "200":
          description: Community updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Community"
    delete:
      operationId: deleteCommunity
      summary: Delete a community
      tags:
        - communities-hub-api
      responses:
        "204":
          description: Community deleted successfully

  /hub/communities/{community-id}/members:
    parameters:
      - name: community-id
        in: path
        description: Community ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getCommunityMembers
      summary: Retrieve members of a specific community by ID
      tags:
        - communities-hub-api
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A paginated list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCommunityMembersResponse"
    post:
      operationId: addCommunityMember
      summary: Add a member to a specific community by ID
      tags:
        - communities-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityMember"
      responses:
        "201":
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityMember"

  /hub/communities/{community-id}/members/{user-id}:
    parameters:
      - name: community-id
        in: path
        description: Community ID
        required: true
        schema:
          type: string
          format: uuid
      - name: user-id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      operationId: deleteCommunityMember
      summary: Delete a member from a specific community by ID
      tags:
        - communities-hub-api
      responses:
        "204":
          description: Member deleted successfully
    put:
      operationId: updateCommunityMember
      summary: Update a member in a specific community by ID
      tags:
        - communities-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityMember"
      responses:
        "200":
          description: Member updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityMember"

  /hub/communities/{community-id}/pages:
    parameters:
      - name: community-id
        in: path
        description: Community ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getCommunityCustomPages
      summary: Retrieve all custom pages for a specific community
      tags:
        - custom-pages-hub-api
      responses:
        "200":
          description: A list of custom pages for the community
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomPage"

    post:
      operationId: createCommunityCustomPage
      summary: Create a new custom page for a specific community
      tags:
        - custom-pages-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPage"
      responses:
        "201":
          description: Custom page created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"

  /hub/communities/{community-id}/pages/{page-ref}:
    parameters:
      - name: community-id
        in: path
        description: Community ID
        required: true
        schema:
          type: string
          format: uuid
      - name: page-ref
        in: path
        description: Reference of the custom page
        required: true
        schema:
          type: string
    get:
      operationId: getCommunityCustomPage
      summary: Retrieve a specific custom page by reference for a specific community
      tags:
        - custom-pages-hub-api
      responses:
        "200":
          description: A single custom page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

    put:
      operationId: updateCommunityCustomPage
      summary: Update a custom page for a specific community
      tags:
        - custom-pages-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPage"
      responses:
        "200":
          description: Custom page updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

    delete:
      operationId: deleteCommunityCustomPage
      summary: Delete a custom page for a specific community
      tags:
        - custom-pages-hub-api
      responses:
        "204":
          description: Custom page deleted successfully
        "404":
          description: Custom page not found

  /debug/notifications:
    post:
      operationId: debugPostNotification
      summary: Debug endpoint to create a notification for a specific user
      tags:
        - debug-api
      security:
        - BearerAuthOAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - notification
              properties:
                locale:
                  type: string
                  example: "en"
                  description: The locale of the notification
                userId:
                  type: string
                  format: uuid
                  description: The ID of the user to send the notification to
                notification:
                  $ref: "#/components/schemas/Notification"
                  description: The notification to send
      responses:
        "201":
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "404":
          description: User not found
        "400":
          description: Invalid notification payload

components:
  #####################################################
  # Predefined Components
  #####################################################

  securitySchemes:
    BearerAuthOAuth:
      description: Bearer Token.
      type: http
      scheme: bearer

  parameters:
    itemId:
      name: item-id
      in: path
      description: Item ID
      required: true
      schema:
        type: string
        format: uuid
    userId:
      name: user-id
      in: path
      description: User ID
      required: true
      schema:
        type: string
        format: uuid
    libraryId:
      name: library-id
      in: path
      description: Library ID
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    User:
      type: object
      required:
        - id
        - login
        - username
        - firstName
        - lastName
        - roles
      properties:
        id:
          type: string
          format: uuid
        disabled:
          type: boolean
        isEmailVerified:
          type: boolean
        username:
          type: string
        avatarUrl:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        flatNumber:
          type: string
          example: A701
        roles:
          type: array
          items:
            type: string
            example: "admin"
        streetAddress:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
        preferredLanguage:
          type: string
          example: "en"

    LibraryMember:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            role:
              type: string
              enum: ["admin", "member", "requestingJoin"]
              example: "member"

    Item:
      type: object
      required:
        - id
        - name
        - owner
        - imageUrl
        - description
        - shortDescription
        - category
        - favorite
        - borrowCount
        - libraryId
        - borrowRecords

      properties:
        id:
          type: string
          format: uuid
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        name:
          type: string
          example: "Harry Potter Book"
        owner:
          type: string
          example: "TheOpenShelf"
        imageUrl:
          type: string
          example: "/items/harry-potter.png"
        description:
          type: string
          example: "A magical adventure story that follows the journey of a young wizard and his friends."
        shortDescription:
          type: string
          example: "A magical adventure story."
        category:
          $ref: "#/components/schemas/Category"
        favorite:
          type: boolean
          example: true
        borrowCount:
          type: integer
          example: 8
        libraryId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        createdAt:
          type: string
          format: date-time
          example: "2023-11-15T13:45:30Z"
        borrowRecords:
          type: array
          items:
            $ref: "#/components/schemas/BorrowRecord"

    BorrowStatus:
      type: string
      enum:
        - reserved-unconfirmed
        - reserved-confirmed
        - reserved-ready-to-pickup
        - reserved-pickup-unconfirmed
        - borrowed-active
        - borrowed-due-today
        - borrowed-late
        - borrowed-return-unconfirmed
        - returned-early
        - returned-on-time
        - returned-late

    BorrowRecord:
      type: object
      required:
        - id
        - borrowedBy
        - startDate
        - endDate
        - reservationDate
        - status
      properties:
        id:
          type: string
          format: uuid
        borrowedBy:
          type: string
          example: "someone_else@example.com"
        pickupDate:
          type: string
          format: date
          example: "2023-11-15"
        startDate:
          type: string
          format: date
          example: "2023-11-15"
        endDate:
          type: string
          format: date
          example: "2023-11-22"
        reservationDate:
          type: string
          format: date
          example: "2023-11-15"
        effectiveReturnDate:
          type: string
          format: date
          example: "2023-11-22"
        status:
          $ref: "#/components/schemas/BorrowStatus"

    BorrowRecordStandalone:
      allOf:
        - $ref: "#/components/schemas/BorrowRecord"
        - type: object
          properties:
            item:
              $ref: "#/components/schemas/Item"
          required:
            - item

    Category:
      type: object
      required:
        - id
        - name
        - color
        - template
        - icon
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        icon:
          type: string
        color:
          type: string
        template:
          type: string

    RequestBorrowItem:
      type: object
      required:
        - name
      properties:
        borrowDate:
          type: string
          format: date-time
        returnDate:
          type: string
          format: date-time
        borrower:
          type: string
          format: uuid

    RequestReturnItem:
      type: object
      required:
        - name
      properties:
        date:
          type: string
          format: date-time
        borrower:
          type: string
          format: uuid

    ResponseGetItems:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"

    Notification:
      type: object
      required:
        - id
        - author
        - date
        - type
        - alreadyRead
      properties:
        id:
          type: string
          format: uuid
        author:
          type: string
          example: "system"
        date:
          type: string
          format: date-time
          example: "2023-11-15T13:45:30"
        type:
          type: string
          enum:
            - ITEM_AVAILABLE
            - ITEM_DUE
            - ITEM_BORROW_RESERVATION_DATE_START
            - ITEM_RESERVED_NO_LONGER_AVAILABLE
            - ITEM_RESERVATION_APPROVED
            - ITEM_RESERVATION_REJECTED
            - ITEM_PICKUP_APPROVED
            - ITEM_PICKUP_REJECTED
            - ITEM_RETURN_APPROVED
            - ITEM_RETURN_REJECTED
            - ITEM_NEW_RESERVATION_TO_CONFIRM
            - ITEM_NEW_PICKUP_TO_CONFIRM
            - ITEM_NEW_RETURN_TO_CONFIRM
        alreadyRead:
          type: boolean
          example: false
        payload:
          type: object
          additionalProperties: true
        item:
          $ref: "#/components/schemas/Item"
        borrowRecord:
          $ref: "#/components/schemas/BorrowRecord"

    ItemStat:
      allOf:
        - $ref: "#/components/schemas/Item"
        - type: object
          required:
            - borrowCount
            - lateReturnPercentage
            - averageDuration
          properties:
            borrowCount:
              type: integer
            lateReturnPercentage:
              type: number
            averageDuration:
              type: number

    UserWithStats:
      type: object
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - borrowedItems
        - returnedLate
        - successRate
        - disabled
        - isEmailVerified
        - streetAddress
        - city
        - postalCode
        - country
        - roles
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        borrowedItems:
          type: integer
        returnedLate:
          type: integer
        successRate:
          type: number
        disabled:
          type: boolean
        isEmailVerified:
          type: boolean
        flatNumber:
          type: string
        streetAddress:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
        roles:
          type: array
          items:
            type: string
        avatarUrl:
          type: string
        preferredLanguage:
          type: string

    DashboardBorrowesOverTimeData:
      type: object
      required:
        - labelsX
        - axisYLabels
        - data
      properties:
        labelsX:
          type: array
          items:
            type: string
        axisYLabels:
          type: array
          items:
            type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ChartCoordinates"

    DashboardBorrowesMetrics:
      type: object
      required:
        - metrics
      properties:
        metrics:
          type: object
          properties:
            totalBorrows:
              type: integer
            totalReservations:
              type: integer
            itemsOnLoan:
              type: integer
            avgLoanDuration:
              type: number
            returnTimeliness:
              type: number

    BorrowerMetrics:
      type: object
      required:
        - username
        - totalBorrows
      properties:
        username:
          type: string
        totalBorrows:
          type: integer

    ChartCoordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
        y:
          type: number

    ItemMetrics:
      type: object
      required:
        - item
        - totalBorrows
      properties:
        item:
          type: string
        totalBorrows:
          type: integer

    CategoryMetrics:
      type: object
      required:
        - category
        - icon
        - totalBorrows
        - numberOfItems
      properties:
        category:
          type: string
        icon:
          type: string
        totalBorrows:
          type: integer
        borrowedItems:
          type: integer

    PaginatedItemsResponse:
      type: object
      required:
        - totalPages
        - totalItems
        - currentPage
        - itemsPerPage
        - items
      properties:
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        currentPage:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 10
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"

    PaginatedBorrowRecordsResponse:
      type: object
      required:
        - totalPages
        - totalItems
        - currentPage
        - recordsPerPage
        - records
      properties:
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        currentPage:
          type: integer
          example: 1
        recordsPerPage:
          type: integer
          example: 10
        records:
          type: array
          items:
            $ref: "#/components/schemas/BorrowRecordStandalone"

    PaginatedItemsStatsResponse:
      type: object
      required:
        - totalPages
        - totalItems
        - currentPage
        - itemsPerPage
        - items
      properties:
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        currentPage:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 10
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemStat"

    PaginatedLibraryMembersResponse:
      type: object
      required:
        - totalPages
        - totalItems
        - currentPage
        - usersPerPage
        - users
      properties:
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        currentPage:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 10
        items:
          type: array
          items:
            $ref: "#/components/schemas/LibraryMember"

    PaginatedCommunityMembersResponse:
      type: object
      required:
        - totalPages
        - totalItems
        - currentPage
        - usersPerPage
        - users
      properties:
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        currentPage:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 10
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommunityMember"

    HelpCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        icon:
          type: string
        order:
          type: integer
          description: The order of the help category

    HelpArticle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        category:
          $ref: "#/components/schemas/HelpCategory"
        order:
          type: integer
          description: The order of the help article

    CustomPage:
      type: object
      required:
        - id
        - ref
        - position
        - title
        - content
      properties:
        id:
          type: string
          format: uuid
        communityId:
          type: string
          format: uuid
        ref:
          type: string
        order:
          type: integer
        position:
          type: string
          enum: ["footer-links", "copyright", "footer-help", "community"]
        title:
          type: string
        content:
          type: string

    BorrowRecordsCountByStatus:
      type: object
      properties:
        reserved-unconfirmed:
          type: integer
          example: 5
        reserved-confirmed:
          type: integer
          example: 3
        reserved-ready-to-pickup:
          type: integer
          example: 2
        reserved-pickup-unconfirmed:
          type: integer
          example: 1
        borrowed-active:
          type: integer
          example: 4
        borrowed-due-today:
          type: integer
          example: 1
        borrowed-late:
          type: integer
          example: 0
        borrowed-return-unconfirmed:
          type: integer
          example: 1
        returned-early:
          type: integer
          example: 2
        returned-on-time:
          type: integer
          example: 3
        returned-late:
          type: integer
          example: 1

    Library:
      type: object
      required:
        - id
        - name
        - requiresApproval
        - freeAccess
        - location
        - instructions
        - isAdmin
        - communityId
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        requiresApproval:
          type: boolean
        freeAccess:
          type: boolean
        location:
          $ref: "#/components/schemas/Location"
        instructions:
          type: string
        isAdmin:
          type: boolean
          example: true
        communityId:
          type: string
          format: uuid
          description: The ID of the community to which the library belongs

    Location:
      type: object
      required:
        - name
        - address
        - coordinates
      properties:
        name:
          type: string
        address:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number

    Community:
      type: object
      required:
        - id
        - name
        - members
        - location
        - requiresApproval
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        location:
          $ref: "#/components/schemas/Location"
        requiresApproval:
          type: boolean
        picture:
          type: string
        description:
          type: string

    MemberRole:
      type: string
      enum: [ADMIN, MEMBER, REQUESTING_JOIN]
      description: Role of a user within a community

    CommunityWithMembership:
      type: object
      required:
        - community
        - membership
      properties:
        community:
          $ref: "#/components/schemas/Community"
        membership:
          type: object
          properties:
            isMember:
              type: boolean
            role:
              $ref: "#/components/schemas/MemberRole"

    CommunityMember:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            role:
              $ref: "#/components/schemas/MemberRole"

    CodedError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: A unique error code that identifies the type of error
          example: AUTH001
        message:
          type: string
          description: A human-readable error message
          example: The specified user could not be found
        traceId:
          type: string
          description: A unique identifier for tracing this error instance
          example: 550e8400-e29b-41d4-a716-446655440000
        documentationUrl:
          type: string
          description: URL to the documentation about this error
          example: https://docs.theopenshelf.com/errors/AUTH001
        variables:
          type: object
          additionalProperties: true
          description: Additional context variables for the error
          example:
            field: "email"
            value: "invalid@email"

    ValidationFieldError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: The field that failed validation
          example: email
        message:
          type: string
          description: The validation error message
          example: must be a valid email

    ValidationError:
      allOf:
        - $ref: "#/components/schemas/CodedError"
        - type: object
          properties:
            variables:
              type: object
              required:
                - fields
              properties:
                fields:
                  type: array
                  items:
                    $ref: "#/components/schemas/ValidationFieldError"

  responses:
    OK_200_GET_HELLO_WORLD:
      description: OK
      content:
        application/json:
          schema:
            title: responseHelloWorld
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: "Hello world!"
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
                example:
                  - id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "Harry Potter Book"
                    located: "ShareSpace"
                    owner: "TheOpenShelf"
                    imageUrl: "/items/harry-potter.png"
                    description: "A magical adventure story that follows the journey of a young wizard and his friends."
                    shortDescription: "A magical adventure story."
                    category:
                      id: "books"
                      name: "Books"
                      color: "blue"
                      template: "book-template"
                    favorite: true
                    borrowCount: 8
    OK_200_LOGIN:
      description: Logged in user details
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
            example:
              id: "123e4567-e89b-12d3-a456-426614174000"
              username: "my-login"
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
              flat: "A701"
    BadRequest:
      description: Bad Request - The request was invalid or cannot be served
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          examples:
            validation_error:
              value:
                code: VAL001
                message: Validation failed
                variables:
                  fields:
                    - field: email
                      message: must be a valid email
            invalid_input:
              value:
                code: VAL002
                message: Missing required field
                variables:
                  field: username
    Unauthorized:
      description: Unauthorized - Authentication is required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: AUTH001
            message: Authentication required
            documentationUrl: https://docs.theopenshelf.com/errors/AUTH001
    Forbidden:
      description: Forbidden - No permission to access the resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: AUTH005
            message: You don't have sufficient permissions to perform this action
    NotFound:
      description: Not Found - The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: RES001
            message: The requested resource was not found
    ValidationError:
      description: Validation Error - The request data failed validation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
          example:
            code: VAL001
            message: Validation failed
            variables:
              fields:
                - field: email
                  message: must be a valid email
                - field: password
                  message: must be at least 8 characters
    InternalServerError:
      description: Internal Server Error - Something went wrong on the server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: SYS001
            message: An unexpected error occurred
