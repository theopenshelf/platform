openapi: 3.0.1
info:
  title: The OpenShelf API
  version: "2.0"
  description: |
    # Summary
    The OpenShelf  API


servers:
  - url: https://TheOpenShelf.dev
    description: The OpenShelf API

paths:

  /public/auth/login:
    post:
      operationId: login
      summary: Log user with username / password
      tags:
        - auth-api

      security:
        - BearerAuthOAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "my-login"
                password:
                  type: string
                  example: "my-password"
              required:
                - username
                - password

      responses:
        '200':
          $ref: "#/components/responses/OK_200_LOGIN"

  /community/hello-world:
    get:
      operationId: getHelloWorld
      summary: hello world
      tags:
        - hello-world-api

      security:
        - BearerAuthOAuth: []

      responses:
        '200':
          $ref: "#/components/responses/OK_200_GET_HELLO_WORLD"

  /community/items:
    get:
      operationId: getItems
      summary: Retrieve all items
      tags:
        - items-api
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"

  /community/items/{item-id}:
    parameters:
      - $ref: "#/components/parameters/itemId"
    get:
      operationId: getItem
      summary: Retrieve a specific item by ID
      tags:
        - items-api
      responses:
        '200':
          description: A single item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /community/items/{item-id}/borrow-records:
    parameters:
      - $ref: "#/components/parameters/itemId"
      - name: owner
        in: query
        description: Filter by owner
        required: false
        schema:
          type: string
      - name: borrower
        in: query
        description: Filter by borrower
        required: false
        schema:
          type: string
    get:
      operationId: getItemBorrowRecords
      summary: Retrieve borrow records for a specific item
      tags:
        - items-api
      responses:
        '200':
          description: Borrow records for the item
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BorrowRecord"

  /community/items/{item-id}/actions/borrow:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: borrowItem
      summary: Borrow an item
      tags:
        - items-api
      requestBody:
        description: Borrow item details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        '201':
          description: Item borrowed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BorrowItem"

  /community/items/{item-id}/actions/favorite:
    parameters:
      - $ref: "#/components/parameters/itemId"
    post:
      operationId: markAsFavorite
      summary: Toggle favorite status of an item
      tags:
        - items-api
      responses:
        '200':
          description: Item favorite status toggled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

  /community/items/{item-id}/my-borrow:
    parameters:
      - $ref: "#/components/parameters/itemId"
    get:
      operationId: getMyBorrowItem
      summary: Retrieve a specific borrowed item for the current user
      tags:
        - items-api
      responses:
        '200':
          description: A specific borrowed item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BorrowItem"
        '404':
          description: Item not found or not borrowed by the user



components:
#####################################################
# Predefined Components
#####################################################

  securitySchemes:

    BearerAuthOAuth:
      description: Bearer Token. 
      type: http
      scheme: bearer

  parameters:
    itemId:
      name: item-id
      in: path
      description: Item ID
      required: true
      schema:
        type: string
        format: uuid
    userId:
      name: user-id
      in: path
      description: User ID
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    User:
      type: object
      required:
        - id
        - login
        - username
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        flat:
          type: string  
          example: A701

    Item:
      type: object
      required:
        - id
        - name
        - located
        - owner
        - imageUrl
        - description
        - shortDescription
        - category
        - favorite
        - borrowCount
      properties:
        id:
          type: string
          format: uuid
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        name:
          type: string
          example: "Harry Potter Book"
        located:
          type: string
          example: "ShareSpace"
        owner:
          type: string
          example: "TheOpenShelf"
        imageUrl:
          type: string
          example: "/items/harry-potter.png"
        description:
          type: string
          example: "A magical adventure story that follows the journey of a young wizard and his friends."
        shortDescription:
          type: string
          example: "A magical adventure story."
        category:
          $ref: "#/components/schemas/Category"
        favorite:
          type: boolean
          example: true
        borrowCount:
          type: integer
          example: 8

    BorrowRecord:
      type: object
      required:
        - borrowedBy
        - startDate
        - endDate
      properties:
        borrowedBy:
          type: string
          example: "someone_else@example.com"
        startDate:
          type: string
          format: date
          example: "2023-11-15"
        endDate:
          type: string
          format: date
          example: "2023-11-22"
    Category:
      type: object
      required:
        - id
        - name
        - color
        - template
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
        template:
          type: string
    BorrowItem:
      allOf:
        - $ref: "#/components/schemas/Item"
        - type: object
          required:
            - record
          properties:
            record:
              $ref: "#/components/schemas/BorrowRecord"
              example:
                borrowedBy: "me@example.com"
                startDate: "2023-11-01"
                endDate: "2023-11-10"

    ItemWithRecords:
      allOf:
        - $ref: "#/components/schemas/Item"
        - type: object
          properties:
            borrowRecords:
              type: array
              items:
                $ref: "#/components/schemas/BorrowRecord"
            isBookedToday:
              type: boolean
            myBooking:
              $ref: "#/components/schemas/BorrowRecord"

    RequestBorrowItem:
      type: object
      required:
        - name
      properties:
        borrowDate:
          type: string
          format: date-time
        returnDate:
          type: string
          format: date-time
        borrower:
          type: string
          format: uuid

    RequestReturnItem:
      type: object
      required:
        - name
      properties:
        date:
          type: string
          format: date-time
        borrower:
          type: string
          format: uuid

    ResponseGetItems:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"

  responses:
    OK_200_GET_HELLO_WORLD:
      description: OK
      content:
        application/json:
          schema:
            title: responseHelloWorld
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: "Hello world!"
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
                example:
                  - id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "Harry Potter Book"
                    located: "ShareSpace"
                    owner: "TheOpenShelf"
                    imageUrl: "/items/harry-potter.png"
                    description: "A magical adventure story that follows the journey of a young wizard and his friends."
                    shortDescription: "A magical adventure story."
                    category:
                      id: "books"
                      name: "Books"
                      color: "blue"
                      template: "book-template"
                    favorite: true
                    borrowCount: 8
    OK_200_LOGIN:
      description: Logged in user details
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
            example:
              id: "123e4567-e89b-12d3-a456-426614174000"
              username: "my-login"
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
              flat: "A701" 